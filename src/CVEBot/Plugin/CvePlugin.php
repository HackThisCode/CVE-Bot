<?php

namespace CVEBot\Plugin;

require_once __DIR__ . '/../Config.php';
require_once __DIR__ . '/CvePlugin/CveFetcher.php';

use Phergie\Irc\Bot\React\AbstractPlugin;
use Phergie\Irc\Event\EventInterface as Event;
use Phergie\Irc\Bot\React\EventQueueInterface as Queue;
use Phergie\Irc\Bot\React\PluginInterface;
use Phergie\Irc\ConnectionInterface;
use React\EventLoop\LoopInterface;
use Phergie\Irc\Client\React\LoopAwareInterface;

class CvePlugin extends AbstractPlugin implements PluginInterface, LoopAwareInterface {
    protected $connections;
    protected $cves = array();

    public function getSubscribedEvents() {
        return array(
            'connect.after.each' => 'addConnection'
        );
    }

    public function addConnection(ConnectionInterface $connection) {
        $this->getConnections()->attach($connection);
    }

    public function getConnections() {
        if (!$this->connections) {
            $this->connections = new \SplObjectStorage;
        }

        return $this->connections;
    }

    public function setLoop(LoopInterface $loop) {
        $config = \CVEBot\Config::getInstance()->getData();

        $loop->addPeriodicTimer(
            $config['cve']['delay'],
            array($this, 'runLoop')
        );

        $this->runLoop();
    }

    public function runLoop() {
        $config = \CVEBot\Config::getInstance()->getData();
        $fetcher = new CvePlugin\CveFetcher($config['cve']['feedurl']);
        $cves = $fetcher->fetch();

        $this->process($cves);
    }

    public function process($items) {
        $factory = $this->getEventQueueFactory();
        $config = \CVEBot\Config::getInstance()->getData();
        $connections = $this->getConnections();

        // Send up to the configured amount of items for each channel
        $sendingItems = array_slice($items, 0, $config['cve']['max_new']);
        $channels = $config['irc']['channels'];

        foreach ($this->getConnections() as $connection) {
            $queue = $factory->getEventQueue($connection);

            array_walk($sendingItems, function($item) use ($queue) {
                array_walk($channels, function($channel) use ($queue) {
                    $queue->ircPrivmsg($channel, $item->format());
                });
            });
        }

        foreach ($items as $item) {
            if (!$this->inCache($item)) {
                $this->cves[$item->getName()] = $item;
            }
        }
    }

    function inCache($item) {
        $name = $item->getName();

        return array_key_exists($name, $this->cves)
            && $item->getTimestamp() <= $this->cves[$name]->getTimestamp();
    }
}
