<?php

require_once __DIR__ . '/../../../../src/CVEBot/Plugin/CvePlugin/Cve.php';
use \Plugin\CvePlugin\Cve as Cve;

const CVE_NAME = 'CVE-123-456';
const CVE_URL = 'http://google.com';
const CVE_TAGS = array('tag1', 'tag2');
const CVE_DESCRIPTION = 'description';

class CveTest extends PHPUnit_Framework_TestCase {
    private $cve;
    private $timestamp;

    /**
     * @before
     */
    public function setupCve() {
        $this->timestamp = time();

        $this->cve = new Cve(
            CVE_NAME,
            $this->timestamp,
            CVE_URL,
            CVE_TAGS,
            CVE_DESCRIPTION
        );
    }

    public function testGetName() {
        $this->assertEquals(
            CVE_NAME,
            $this->cve->getName(),
            "Getter for name matches provided name"
        );
    }

    public function testGetTimestamp() {
        $this->assertEquals(
            $this->timestamp,
            $this->cve->getTimestamp(),
            "Getter for timestamp matches provided timestamp"
        );
    }

    public function testGetTags() {
        $this->assertEquals(
            CVE_TAGS,
            $this->cve->getTags(),
            "Getter for tags matches provided tags"
        );
    }

    public function testGetDescription() {
        $this->assertEquals(
            CVE_DESCRIPTION,
            $this->cve->getDescription(),
            "Getter for description matches provided tags"
        );
    }

    public function testFormatsCorrectly() {
        $date = date('M j Y H:i:s', $this->timestamp);

        $this->assertEquals(
            '[' . CVE_NAME . "] ($date) " . CVE_URL . ' -- ' . CVE_DESCRIPTION,
            $this->cve->format(),
            "CVE is formatted correctly"
        );

        $cve1 = new Cve(
            CVE_NAME,
            $this->timestamp,
            CVE_URL,
            CVE_TAGS,
            str_repeat(CVE_DESCRIPTION, 250)
        );

        $result = preg_match('/^(.*?) -- (.*) \.\.\.$/', $cve1->format(), $matches);
        $this->assertTrue(
            $result === 1,
            "Truncated description has correct format"
        );

        $formattedDescription = $matches[2];
        $this->assertEquals(
            250,
            strlen($formattedDescription),
            "Formatted description is truncated after 250 chars"
        );
    }

    public function testCanParseFromRssRow() {
        $parsedCve = Cve::fromRss(array(
            'link' => CVE_URL,
            'description' => "\n" . CVE_DESCRIPTION . "\n",
            'dc' => array('date' => $this->timestamp),
            'title' => CVE_NAME . ' ('  . join(',', CVE_TAGS) . ')'
        ));

        $this->assertEquals(
            $this->cve,
            $parsedCve,
            "CVE was parsed correctly"
        );
    }
}
